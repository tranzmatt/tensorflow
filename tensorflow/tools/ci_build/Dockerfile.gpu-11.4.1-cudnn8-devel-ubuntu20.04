ARG CUDA_VER=11.4
FROM nvidia/cuda:${CUDA_VER}.1-cudnn8-devel-ubuntu20.04

ARG CUDA_VER=11.4

LABEL maintainer="Jan Prach <jendap@google.com>"

ENV PATH="/usr/local/cuda/bin:/usr/local/cuda/nvvm/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/lib/${PLATFORM_ARCH}-linux-gnu:${LD_LIBRARY_PATH}:/usr/local/lib"
ENV LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib/python3.6/dist-packages/numpy.libs

# In the Ubuntu 16.04 images, cudnn is placed in system paths. Move them to
# /usr/local/cuda
#RUN cp -P /usr/include/cudnn.h /usr/local/cuda/include
#RUN cp -P /usr/lib/x86_64-linux-gnu/libcudnn* /usr/local/cuda/lib64

ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get -q update \
    && apt-get -qqy install software-properties-common lsb-release

# Copy and run the install scripts.
COPY install/*.sh /install/
ARG DEBIAN_FRONTEND=noninteractive
RUN /install/install_bootstrap_deb_packages.sh

RUN apt-get -y --allow-change-held-packages install \
    libnccl2="*cuda${CUDA_VER}" \
    libnccl-dev="*cuda${CUDA_VER}" \
    libcudnn8="*cuda${CUDA_VER}" \
    libcudnn8-dev="*cuda${CUDA_VER}" \
    libnvinfer8="*cuda${CUDA_VER}" \
    libnvinfer-dev="8*cuda${CUDA_VER}" \
    libnvinfer-plugin8="8*cuda${CUDA_VER}" \
    libnvinfer-plugin-dev="8*cuda${CUDA_VER}" \
    python3-libnvinfer="8*cuda${CUDA_VER}" \
    python3-libnvinfer-dev="8*cuda${CUDA_VER}"
RUN /install/install_deb_packages.sh

RUN /install/install_pip_packages_by_version.sh pip3
RUN /install/install_bazel.sh

# Focal has later version
RUN apt-get -q update \
    && ( apt-get -qqy install golang | /install/install_golang.sh)

# Set up the master bazelrc configuration file.
COPY install/.bazelrc /etc/bazel.bazelrc

# Link NCCL libray and header where the build script expects them.
RUN ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib64/libnccl.so.2 \
    && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h \
    && ln -s /usr/include/nccl_net.h /usr/local/cuda/include/nccl_net.h

# Configure the build for our CUDA configuration.
ENV TF_NEED_CUDA 1
ENV TF_NEED_TENSORRT 1
